-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Scalar exposing (Codecs, Dollars(..), ProductCode(..), ProductId(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Dollars
    = Dollars String


type ProductCode
    = ProductCode String


type ProductId
    = ProductId String


defineCodecs :
    { codecDollars : Codec valueDollars
    , codecProductCode : Codec valueProductCode
    , codecProductId : Codec valueProductId
    }
    -> Codecs valueDollars valueProductCode valueProductId
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDollars valueProductCode valueProductId
    ->
        { codecDollars : Codec valueDollars
        , codecProductCode : Codec valueProductCode
        , codecProductId : Codec valueProductId
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDollars valueProductCode valueProductId
    = Codecs (RawCodecs valueDollars valueProductCode valueProductId)


type alias RawCodecs valueDollars valueProductCode valueProductId =
    { codecDollars : Codec valueDollars
    , codecProductCode : Codec valueProductCode
    , codecProductId : Codec valueProductId
    }


defaultCodecs : RawCodecs Dollars ProductCode ProductId
defaultCodecs =
    { codecDollars =
        { encoder = \(Dollars raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Dollars
        }
    , codecProductCode =
        { encoder = \(ProductCode raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ProductCode
        }
    , codecProductId =
        { encoder = \(ProductId raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ProductId
        }
    }
